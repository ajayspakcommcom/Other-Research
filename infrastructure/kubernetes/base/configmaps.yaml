apiVersion: v1
kind: ConfigMap
metadata:
  name: spak-backend-config
  namespace: spak-platform
  labels:
    app.kubernetes.io/name: spak-backend
    app.kubernetes.io/component: config
data:
  NODE_ENV: "production"
  API_PORT: "3001"
  MONGODB_URI: "mongodb://spak-mongodb:27017/spak_communication"
  REDIS_URL: "redis://spak-redis:6379"
  JWT_EXPIRES_IN: "1h"
  JWT_REFRESH_EXPIRES_IN: "7d"
  GITHUB_CALLBACK_URL: "https://api.spak.com/api/v1/auth/github/callback"
  FRONTEND_URL: "https://spak.com"
  THROTTLE_TTL: "60"
  THROTTLE_LIMIT: "100"
  CACHE_TTL: "300"
  CACHE_MAX: "100"
  LOG_LEVEL: "info"
  LOG_FORMAT: "json"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spak-frontend-config
  namespace: spak-platform
  labels:
    app.kubernetes.io/name: spak-frontend
    app.kubernetes.io/component: config
data:
  REACT_APP_API_URL: "https://api.spak.com"
  REACT_APP_ENVIRONMENT: "production"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spak-mongodb-config
  namespace: spak-platform
  labels:
    app.kubernetes.io/name: spak-mongodb
    app.kubernetes.io/component: config
data:
  MONGO_INITDB_DATABASE: "spak_communication"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spak-nginx-config
  namespace: spak-platform
  labels:
    app.kubernetes.io/name: spak-nginx
    app.kubernetes.io/component: config
data:
  nginx.conf: |
    upstream backend {
        server spak-backend:3001;
    }

    upstream frontend {
        server spak-frontend:3000;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;

    server {
        listen 80;
        server_name spak.com api.spak.com;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name spak.com;

        ssl_certificate /etc/nginx/ssl/tls.crt;
        ssl_certificate_key /etc/nginx/ssl/tls.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:; connect-src 'self' https://api.spak.com;" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    server {
        listen 443 ssl http2;
        server_name api.spak.com;

        ssl_certificate /etc/nginx/ssl/tls.crt;
        ssl_certificate_key /etc/nginx/ssl/tls.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # API rate limiting
        location /api/v1/auth/login {
            limit_req zone=login burst=5 nodelay;
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }